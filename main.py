# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.




import sys
from PyQt5 import QtCore, QtGui, QtWidgets


import sys
import struct

from PIL import Image


# Decompose a binary file into the bits array
def decompose(data, ROIs):
    v = []
    h = []
    
    # Pack file len in 4 bytes
    fSize = len(data)    
    header_bytes = [b for b in struct.pack("i", fSize)]

    # Pack ROIs number in 2 bytes
    ROIs_Number = len(ROIs)
    ROIs_Number_bytes = [b for b in struct.pack("H", ROIs_Number)]
    header_bytes += ROIs_Number_bytes

    # Pack each ROIs in 2 bytes
    for roi in ROIs:
        for index in range(0, 4):
            roi_bytes = [b for b in struct.pack("H", roi[index])]
            header_bytes += roi_bytes
    
    bytes = [b for b in data]

    for b in bytes:
        for i in range(7, -1, -1):
            v.append((b >> i) & 0x1)
    for b in header_bytes:
        for i in range(7, -1, -1):
            h.append((b >> i) & 0x1)
    return h, v

def getROIsBytes(v, width, height, ROIs, payload_size):
    ROIs_bytes = []
    for roi in ROIs:
        roi_bytes = bytearray()
        roi_v = []
        for h in range(roi[1], roi[1] + roi[3]):
            roi_v += v[(h * width + roi[0]) * 3:(h * width + roi[0] + roi[2]) * 3]
        length = len(roi_v)
        for idx in range(0, int(len(roi_v)/8)):
            byte = 0
            for i in range(0, 8):
                if (idx*8+i < length):
                    byte = (byte<<1) + roi_v[idx*8+i]
            roi_bytes.append(byte)

        ROIs_bytes.append(roi_bytes[0:payload_size])
    return ROIs_bytes


# Assemble a bits array into a binary file
def assemble(v, width, height):    
    bytes = bytearray()
    ROIs = []
    length = len(v)
    for idx in range(0, int(len(v)/8)):
        byte = 0
        for i in range(0, 8):
            if (idx*8+i < length):
                byte = (byte<<1) + v[idx*8+i]
        bytes.append(byte)
    payload_size = struct.unpack("i", bytes[:4])[0]
    ROIs_Number = struct.unpack("H", bytes[4:6])[0]
    ROIs = []
    stx = 6
    for idx in range(ROIs_Number):
        edx = stx + 2
        x = struct.unpack("H", bytes[stx:edx])[0]
        stx += 2
        edx += 2
        y = struct.unpack("H", bytes[stx:edx])[0]
        stx += 2
        edx += 2
        w = struct.unpack("H", bytes[stx:edx])[0]
        stx += 2
        edx += 2
        h = struct.unpack("H", bytes[stx:edx])[0]
        stx = edx
        ROI = (x, y, w, h)
        ROIs.append(ROI)
    ROI_byts = getROIsBytes(v, width, height, ROIs, payload_size)    
    return ROI_byts

# Set the i-th bit of v to x
def set_bit(n, i, x):
    mask = 1 << i
    n &= ~mask
    if x:
        n |= mask
    return n

# Embed watermark image into LSB bits of an image
def embed(imgFile, watermark, ROIs):
    img = Image.open(imgFile)
    (width, height) = img.size
    conv_img = img.convert("RGBA")
    conv = conv_img.getdata()

    f = open(watermark, "rb")
    data = f.read()
    f.close()
        

    # Process data from watermark image
    header, v = decompose(data, ROIs)

    watermark_size = len(v)/8/1024.0
    
    for roi in ROIs:
        max_size = roi[2] * roi[3]*3.0/8/1024
        if (watermark_size > max_size):
            ROIs.remove(roi)

    
    # Add until multiple of 3
    while(len(v)%3):
        v.append(0)
    while(len(header)%3):
        header.append(0)

    # Create watermarked image
    steg_img = conv_img.copy()
    data_img = steg_img.getdata()
    idx = 0
    for h in range(height):
        for w in range(width):
            (r, g, b, a) = conv.getpixel((w, h))
            if idx < len(header):
                r = set_bit(r, 0, header[idx])
                g = set_bit(g, 0, header[idx+1])
                b = set_bit(b, 0, header[idx+2])
                data_img.putpixel((w,h), (r, g, b, a))
                idx = idx + 3
            else:
                break

    for roi in ROIs:
        idx = 0
        for h in range(roi[1], roi[1] + roi[3]):
            for w in range(roi[0], roi[0] + roi[2]):
                (r, g, b, a) = conv.getpixel((w, h))
                if idx < len(v):
                    r = set_bit(r, 0, v[idx])
                    g = set_bit(g, 0, v[idx+1])
                    b = set_bit(b, 0, v[idx+2])
                    data_img.putpixel((w,h), (r, g, b, a))
                    idx = idx + 3
                else:
                    break
    
    steg_img.save(imgFile + "-watermarked.png", "PNG")

# Extract watermark image
def extract(in_file):
    img = Image.open(in_file)
    (width, height) = img.size
    conv = img.convert("RGBA").getdata()

    # Extract LSBs
    v = []
    for h in range(height):
        for w in range(width):
            (r, g, b, a) = conv.getpixel((w, h))
            v.append(r & 1)
            v.append(g & 1)
            v.append(b & 1)
            
    ROIs = assemble(v, width, height)

    for i, roi in enumerate(ROIs):
        out_f = open(in_file + "-watermark-" + str(i) + ".png", "wb")
        out_f.write(roi)
        out_f.close()

class Rect(object):
    def __init__(self, x, y, w, h):
        self.x = x
        self.y = y
        self.w = w
        self.h = h
    
    def checkInRect(self, rect):
        if self.x < rect.x:
            return False
        if self.y < rect.y:
            return False
        if self.x + self.w > rect.x + rect.w:
            return False
        if self.y + self.h > rect.y + rect.h:
            return False
        return True 
    def checkIntersect(self, rect):
        if self.x + self.w < rect.x or  self.x > rect.x + rect.w or self.y + self.h < rect.y or self.y > rect.y + rect.h:
            return False
        else:
            return True
class ROI_Dialog(QtWidgets.QDialog):
    def __init__(self, filename, ROIs):

        self.point1 = (0, 0)
        self.point2 = (0, 0)
        self.ROIs = ROIs
        self.filename = filename
        self.W = 500
        self.H = 500
        # convert image file into pixmap
        self.pixmap_image = QtGui.QPixmap(self.filename)
        self.tmp_pixmap = self.pixmap_image.copy()


        super(ROI_Dialog, self).__init__()
        self.setObjectName("Dialog")
        self.resize(520, 590)
        self.setFixedHeight(590)
        self.setFixedWidth(520)
        self.lbImage = QtWidgets.QLabel(self)
        self.lbImage.setGeometry(QtCore.QRect(10, 40, 500, 500))
        self.lbImage.setStyleSheet("border-color: rgb(0, 0, 0);")
        self.lbImage.setFrameShape(QtWidgets.QFrame.Box)
        self.lbImage.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.lbImage.setText("")
        self.lbImage.setObjectName("lbImage")
        self.lbImage.setScaledContents(True)
        self.btnSubmit = QtWidgets.QPushButton(self)
        self.btnSubmit.setGeometry(QtCore.QRect(130, 550, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnSubmit.setFont(font)
        self.btnSubmit.setStyleSheet("background-color: rgb(170, 0, 0);\n" "color: rgb(255, 255, 255);")
        self.btnSubmit.setObjectName("btnSubmit")
        self.btnReset = QtWidgets.QPushButton(self)
        self.btnReset.setGeometry(QtCore.QRect(280, 550, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnReset.setFont(font)
        self.btnReset.setStyleSheet("background-color: rgb(170, 0, 0);\n" "color: rgb(255, 255, 255);")
        self.btnReset.setObjectName("btnReset")
        self.label_2 = QtWidgets.QLabel(self)
        self.label_2.setGeometry(QtCore.QRect(140, 10, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.lbROINumber = QtWidgets.QLabel(self)
        self.lbROINumber.setGeometry(QtCore.QRect(280, 10, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lbROINumber.setFont(font)
        self.lbROINumber.setObjectName("lbROINumber")

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

        self.bundle()

    def bundle(self):
        self.paint()
        self.lbImage.mousePressEvent = self.mousePress
        self.lbImage.mouseMoveEvent = self.mouseMove
        self.lbImage.mouseReleaseEvent = self.mouseRelease
        self.btnReset.clicked.connect(self.reset)
        self.btnSubmit.clicked.connect(self.close)
    
    def setROINumber_txt(self):
        self.lbROINumber.setText(str(len(self.ROIs)))

    def reset(self):
        self.ROIs = []
        self.setROINumber_txt()
        self.paint()

    def mousePress(self, event):
        x = event.pos().x()
        y = event.pos().y()
        self.point1 = (x, y)
    
    def mouseRelease(self, event):
        x = event.pos().x()
        y = event.pos().y()
        x1 = min(self.point1[0], x)
        y1 = min(self.point1[1], y)
        x2 = max(self.point1[0], x)
        y2 = max(self.point1[1], y)
        rect = Rect(x1, y1, x2-x1, y2-y1)
        r_rect = (x1, y1, x2-x1, y2-y1)
        v_rect = self.getVRect(r_rect)
        if event.button() == QtCore.Qt.MouseButton.RightButton:
            # remove rois bounded in rect
            self.removeInnerROIs(v_rect)
        else:# event.buttons()== QtCore.Qt.MouseButton.LeftButton:
            # append rois
            if not self.checkIntersect(v_rect):
                self.ROIs.append(v_rect)
        self.setROINumber_txt()
        self.paint()

    def checkIntersect(self, rect):
        c_rect = Rect(rect[0], rect[1], rect[2], rect[3])
        for roi in self.ROIs:
            roi_rect = Rect(roi[0], roi[1], roi[2], roi[3])
            if roi_rect.checkIntersect(c_rect):
                return True

    def removeInnerROIs(self, rect):
        c_rect = Rect(rect[0], rect[1], rect[2], rect[3])
        for roi in self.ROIs:
            roi_rect = Rect(roi[0], roi[1], roi[2], roi[3])
            if roi_rect.checkInRect(c_rect):
                self.ROIs.remove(roi)


    def getRRect(self, rect):
        W_ratio = self.pixmap_image.width() / self.lbImage.width()
        H_ratio = self.pixmap_image.height() / self.lbImage.height()
        return (round(rect.x / W_ratio), round(rect.y / H_ratio), round(rect.w / W_ratio), round(rect.h / H_ratio))

    def getVRect(self, rect):
        W_ratio = self.pixmap_image.width() / self.lbImage.width()
        H_ratio = self.pixmap_image.height() / self.lbImage.height()
        return (round(rect[0] * W_ratio), round(rect[1] * H_ratio), round(rect[2] * W_ratio), round(rect[3] * H_ratio))

    def mouseMove(self, event):
        x = event.pos().x()
        y = event.pos().y()
        x1 = min(self.point1[0], x)
        y1 = min(self.point1[1], y)
        x2 = max(self.point1[0], x)
        y2 = max(self.point1[1], y)
        rect = Rect(x1, y1, x2-x1, y2-y1)
        v_rect = self.getVRect((x1, y1, x2-x1, y2-y1))#(x1, y1, x2-x1, y2-y1)#
        if event.buttons()== QtCore.Qt.MouseButton.RightButton:
            self.drawRect(v_rect, True)
        else:# event.button()== QtCore.Qt.MouseButton.LeftButton:
            self.drawRect(v_rect)
    
    def drawRect(self, rect, isRemove=False):
        self.tmp_pixmap = self.pixmap_image.copy()

        painterInstance = QtGui.QPainter(self.tmp_pixmap)
        self.penRectangle = QtGui.QPen(QtCore.Qt.green)
        painterInstance.setPen(self.penRectangle)
        self.penRectangle.setWidth(1) 
        for roi in self.ROIs:
            # v_rect = self.getVRect(roi)
            painterInstance.drawRect(roi[0], roi[1], roi[2], roi[3])


        if isRemove:
            self.penRectangle = QtGui.QPen(QtCore.Qt.red)
            painterInstance.setPen(self.penRectangle)
        painterInstance.drawRect(rect[0], rect[1], rect[2], rect[3])

        # set pixmap onto the label widget
        self.lbImage.setPixmap(self.tmp_pixmap)

    def paint(self):
        self.tmp_pixmap = self.pixmap_image.copy()
        # create painter instance with pixmap
        painterInstance = QtGui.QPainter(self.tmp_pixmap)
        # set rectangle color and thickness
        self.penRectangle = QtGui.QPen(QtCore.Qt.green)
        self.penRectangle.setWidth(1)

        # draw rectangle on painter
        painterInstance.setPen(self.penRectangle)
        for rect in self.ROIs:
            # v_rect = self.getVRect(rect)
            painterInstance.drawRect(rect[0], rect[1], rect[2], rect[3])

        # set pixmap onto the label widget
        self.lbImage.setPixmap(self.tmp_pixmap)
        # self.ui.label_imageDisplay.show()

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Dialog", "Draw the ROIs"))
        self.btnSubmit.setText(_translate("Dialog", "OK"))
        self.btnReset.setText(_translate("Dialog", "Reset"))
        self.label_2.setText(_translate("Dialog", "Number of ROIs:"))
        self.lbROINumber.setText(_translate("Dialog", "0"))
# Main window
class MyWindow(QtWidgets.QMainWindow):

    # Create main window
    def __init__(self, parent=None):
        QtWidgets.QMainWindow.__init__(self, parent)
        self.setObjectName("MainWindow")
        self.setFixedHeight(529)
        self.setFixedWidth(609)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 611, 531))
        self.tabWidget.setAutoFillBackground(False)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.label = QtWidgets.QLabel(self.tab)
        self.label.setGeometry(QtCore.QRect(130, 50, 361, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setUnderline(True)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.tab)
        self.label_2.setGeometry(QtCore.QRect(30, 160, 141, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.btnImage = QtWidgets.QPushButton(self.tab)
        self.btnImage.setGeometry(QtCore.QRect(220, 160, 151, 25))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        self.btnImage.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnImage.setFont(font)
        self.btnImage.setStyleSheet("background-color: rgb(255, 255, 255);\n" "border-color: rgb(0, 0, 0);\n" "border-top-color: rgb(0, 0, 0);")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("browse.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnImage.setIcon(icon)
        self.btnImage.setIconSize(QtCore.QSize(24, 24))
        self.btnImage.setObjectName("btnImage")
        self.btnImage.setStyleSheet("background-color: rgba(240, 240, 240, 255);")
        self.lbImage = QtWidgets.QLabel(self.tab)
        self.lbImage.setGeometry(QtCore.QRect(410, 110, 141, 121))
        self.lbImage.setFrameShape(QtWidgets.QFrame.Box)
        self.lbImage.setFrameShadow(QtWidgets.QFrame.Plain)
        self.lbImage.setText("")
        self.lbImage.setScaledContents(True)
        self.lbImage.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.lbImage.setObjectName("lbImage")
        self.label_3 = QtWidgets.QLabel(self.tab)
        self.label_3.setGeometry(QtCore.QRect(30, 280, 151, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.btnWatermark = QtWidgets.QPushButton(self.tab)
        self.btnWatermark.setGeometry(QtCore.QRect(220, 280, 151, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnWatermark.setFont(font)
        self.btnWatermark.setIcon(icon)
        self.btnWatermark.setIconSize(QtCore.QSize(24, 24))
        self.btnWatermark.setAutoDefault(True)
        self.btnWatermark.setObjectName("btnWatermark")
        self.btnWatermark.setStyleSheet("background-color: rgba(240, 240, 240, 255);")
        self.lbWatermark = QtWidgets.QLabel(self.tab)
        self.lbWatermark.setGeometry(QtCore.QRect(430, 250, 101, 91))
        self.lbWatermark.setFrameShape(QtWidgets.QFrame.Box)
        self.lbWatermark.setFrameShadow(QtWidgets.QFrame.Plain)
        self.lbWatermark.setText("")
        self.lbWatermark.setScaledContents(True)
        self.lbWatermark.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.lbWatermark.setObjectName("lbWatermark")
        self.label_4 = QtWidgets.QLabel(self.tab)
        self.label_4.setGeometry(QtCore.QRect(30, 380, 221, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.btnAddROI = QtWidgets.QToolButton(self.tab)
        self.btnAddROI.setEnabled(True)
        self.btnAddROI.setGeometry(QtCore.QRect(460, 370, 50, 50))
        self.btnAddROI.setAutoFillBackground(False)
        self.btnAddROI.setStyleSheet("background-color: rgba(255, 255, 255,0);")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("add.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnAddROI.setIcon(icon1)
        self.btnAddROI.setIconSize(QtCore.QSize(50, 50))
        self.btnAddROI.setObjectName("btnAddROI")
        self.btnSubmit = QtWidgets.QPushButton(self.tab)
        self.btnSubmit.setGeometry(QtCore.QRect(190, 450, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnSubmit.setFont(font)
        self.btnSubmit.setStyleSheet("background-color: rgb(170, 0, 0);\n" "color: rgb(255, 255, 255);")
        self.btnSubmit.setObjectName("btnSubmit")
        self.btnReset = QtWidgets.QPushButton(self.tab)
        self.btnReset.setGeometry(QtCore.QRect(330, 450, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnReset.setFont(font)
        self.btnReset.setStyleSheet("background-color: rgb(170, 0, 0);\n" "color: rgb(255, 255, 255);")
        self.btnReset.setObjectName("btnReset")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.lbWImage = QtWidgets.QLabel(self.tab_2)
        self.lbWImage.setGeometry(QtCore.QRect(410, 160, 141, 121))
        self.lbWImage.setFrameShape(QtWidgets.QFrame.Box)
        self.lbWImage.setFrameShadow(QtWidgets.QFrame.Plain)
        self.lbWImage.setText("")
        self.lbWImage.setScaledContents(True)
        self.lbWImage.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.lbWImage.setObjectName("lbWImage")
        self.label_5 = QtWidgets.QLabel(self.tab_2)
        self.label_5.setGeometry(QtCore.QRect(50, 210, 141, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.btnWImage = QtWidgets.QPushButton(self.tab_2)
        self.btnWImage.setGeometry(QtCore.QRect(220, 210, 151, 25))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.btnWImage.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnWImage.setFont(font)
        self.btnWImage.setStyleSheet("background-color: rgb(255, 255, 255);\n" "border-color: rgb(0, 0, 0);\n" "border-top-color: rgb(0, 0, 0);")
        self.btnWImage.setIcon(icon)
        self.btnWImage.setIconSize(QtCore.QSize(24, 24))
        self.btnWImage.setObjectName("btnWImage")
        self.label_6 = QtWidgets.QLabel(self.tab_2)
        self.label_6.setGeometry(QtCore.QRect(130, 50, 361, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setUnderline(True)
        self.label_6.setFont(font)
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.btnReset1 = QtWidgets.QPushButton(self.tab_2)
        self.btnReset1.setGeometry(QtCore.QRect(330, 450, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnReset1.setFont(font)
        self.btnReset1.setStyleSheet("background-color: rgb(170, 0, 0);\n" "color: rgb(255, 255, 255);")
        self.btnReset1.setObjectName("btnReset1")
        self.btnExtract = QtWidgets.QPushButton(self.tab_2)
        self.btnExtract.setGeometry(QtCore.QRect(190, 450, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnExtract.setFont(font)
        self.btnExtract.setStyleSheet("background-color: rgb(170, 0, 0);\n" "color: rgb(255, 255, 255);")
        self.btnExtract.setObjectName("btnExtract")
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.label_7 = QtWidgets.QLabel(self.tab_3)
        self.label_7.setGeometry(QtCore.QRect(110, 100, 361, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setUnderline(False)
        self.label_7.setFont(font)
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.textBrowser = QtWidgets.QTextBrowser(self.tab_3)
        self.textBrowser.setGeometry(QtCore.QRect(20, 160, 561, 191))
        self.textBrowser.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.textBrowser.setFrameShadow(QtWidgets.QFrame.Plain)
        self.textBrowser.setObjectName("textBrowser")

        self.tabWidget.addTab(self.tab_3, "")
        self.setCentralWidget(self.centralwidget)

        self.retranslateUi()
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)


        self.bundle()
        

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "Watermarking Using Multi ROIs"))
        self.label.setText(_translate("MainWindow", "Please fill the form to process"))
        self.label_2.setText(_translate("MainWindow", "Choose an image"))
        self.btnImage.setText(_translate("MainWindow", "   Browse"))
        self.label_3.setText(_translate("MainWindow", "Choose a watermark"))
        self.btnWatermark.setText(_translate("MainWindow", "   Browse"))
        self.label_4.setText(_translate("MainWindow", "Choose Regions of interest"))
        self.btnWImage.setText(_translate("MainWindow", "   Browse"))
        self.label_5.setText(_translate("MainWindow", "Choose an image"))
        self.btnAddROI.setText(_translate("MainWindow", "..."))
        self.btnReset.setText(_translate("MainWindow", "Reset"))
        self.label_6.setText(_translate("MainWindow", "Please fill the form to process"))
        self.label_7.setText(_translate("MainWindow", "How to use the application"))
        self.btnSubmit.setText(_translate("MainWindow", "Submit"))
        self.btnReset1.setText(_translate("MainWindow", "Reset"))
        self.btnExtract.setText(_translate("MainWindow", "Extract"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; font-weight:600;\">- Watermark</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt;\">  1. Fill the form such as image, watermark image, ROIs.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt;\">  2. For the ROIs, click the &quot;+&quot; button, then draw the multiple rectangles for the ROIs.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt;\">  3. Click the &quot;Submit&quot; button for the watermarking.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; font-weight:600;\">- Dewatermark</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; font-weight:600;\">  </span><span style=\" font-size:10pt;\">1. Fill the form to dewatermark.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt;\">  2. Click the &quot;Submit&quot; button for the dewatermarking.</span></p></body></html>"))

        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Watermark"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Dewatermark"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Help"))

    def bundle(self):

        self.reset()
        self.wreset()

        self.btnAddROI.clicked.connect(self.openROIDLG)
        self.btnSubmit.clicked.connect(self.watermarking)
        self.btnReset.clicked.connect(self.reset)
        self.btnImage.clicked.connect(self.browseImage)
        self.btnWatermark.clicked.connect(self.browseWatermark)
        self.btnWImage.clicked.connect(self.browseWImage)
        self.btnExtract.clicked.connect(self.dewatermarking)
        self.btnReset1.clicked.connect(self.wreset)

    
    def watermarking(self):
        if self.coverImage is None:
            self.showError("Error", "Please input the image")
            return
        if self.watermarkImage is None:
            self.showError("Error", "Please input the watermark image")
            return
        if not self.ROIs:
            self.showError("Error", "Please draw the ROIs")
            return

        embed(self.coverImage, self.watermarkImage, self.ROIs)
        self.showAlert("Alert", "Completed the Watermarking")

    def dewatermarking(self):
        if self.watermarkedImage is None:
            self.showError("Error", "Please input the watermarked image")
            return
        extract(self.watermarkedImage)
        self.showAlert("Alert", "Completed the Dewatermarking")


    def reset(self):
        self.ROIs = []
        self.coverImage = None
        self.watermarkImage = None
        self.lbImage.clear()
        self.lbWatermark.clear()

    def wreset(self):
        self.watermarkedImage = None
        self.lbWImage.clear()

    def browseImage(self):
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        self.coverImage, _ = QtWidgets.QFileDialog.getOpenFileName(self,"Open an image", "","All Files (*);;Image Files (*.jpg *.bmp *.png)", options=options)
        self.lbImage.setPixmap(QtGui.QPixmap(self.coverImage))

    def browseWImage(self):
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        self.watermarkedImage, _ = QtWidgets.QFileDialog.getOpenFileName(self,"Open an watermarked image", "","All Files (*);;Image Files (*.jpg *.bmp *.png)", options=options)
        self.lbWImage.setPixmap(QtGui.QPixmap(self.watermarkedImage))

    def browseWatermark(self):
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        self.watermarkImage, _ = QtWidgets.QFileDialog.getOpenFileName(self,"Open an watermark image", "","All Files (*);;Image Files (*.jpg *.bmp *.png)", options=options)
        self.lbWatermark.setPixmap(QtGui.QPixmap(self.watermarkImage))


    def openROIDLG(self):
        if self.coverImage is not None and self.watermarkImage is not None:
            dlg = ROI_Dialog(self.coverImage, [])
            dlg.exec_()
            self.ROIs = dlg.ROIs
    def showAlert(self, title, text):
       msg = QtWidgets.QMessageBox.warning(self, title, text, QtWidgets.QMessageBox.Ok)
    def showError(self, title, text):
        msg = QtWidgets.QMessageBox.critical(self, title, text, QtWidgets.QMessageBox.Ok)
        # msg.show()
        
        
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    win = MyWindow()
    win.show()
    win.setWindowTitle("Watermarking Using Multi ROIs")
    sys.exit(app.exec_())